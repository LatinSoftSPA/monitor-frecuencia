{"ast":null,"code":"var _jsxFileName = \"/home/mvera/Documentos/LATINSOFT/REACT JS/APP MONITORES/src/componets/Mapa/index.jsx\";\nimport React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nconst containerStyle = {\n  width: '100%',\n  height: '85vh'\n};\nconst options = {\n  zoomControlOptions: {// ...otherOptions\n  }\n};\nconst center = {\n  lat: 0,\n  lng: 0\n};\nconst key_google = 'AIzaSyCpcjpET_egxZ-KiFlQwio0x7HLFjcphgc';\n\nconst Index = () => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: key_google // ,\n    // ...otherOptions\n\n  });\n\n  const renderMap = () => {\n    // wrapping to a function is useful in case you want to access `window.google`\n    // to eg. setup options or create latLng object, it won't be available otherwise\n    // feel free to render directly if you don't need that\n    const onLoad = React.useCallback(function onLoad(mapInstance) {// do something with map Instance\n    });\n    return /*#__PURE__*/React.createElement(GoogleMap, {\n      options: options,\n      onLoad: onLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    });\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \"Map cannot be loaded right now, sorry.\");\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 35\n    }\n  });\n};\n\nexport default React.memo(Index);","map":{"version":3,"sources":["/home/mvera/Documentos/LATINSOFT/REACT JS/APP MONITORES/src/componets/Mapa/index.jsx"],"names":["React","GoogleMap","LoadScript","containerStyle","width","height","options","zoomControlOptions","center","lat","lng","key_google","Index","isLoaded","loadError","useLoadScript","googleMapsApiKey","renderMap","onLoad","useCallback","mapInstance","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,MADc;AAErBC,EAAAA,MAAM,EAAE;AAFa,CAAvB;AAKA,MAAMC,OAAO,GAAG;AACZC,EAAAA,kBAAkB,EAAE,CAChB;AADgB;AADR,CAAhB;AAMA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,CADQ;AAEbC,EAAAA,GAAG,EAAE;AAFQ,CAAf;AAKA,MAAMC,UAAU,GAAG,yCAAnB;;AACA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BC,aAAa,CAAC;AAC5CC,IAAAA,gBAAgB,EAAEL,UAD0B,CACf;AAC7B;;AAF4C,GAAD,CAA7C;;AAKA,QAAMM,SAAS,GAAG,MAAM;AACtB;AACA;AACA;AACA,UAAMC,MAAM,GAAGlB,KAAK,CAACmB,WAAN,CACb,SAASD,MAAT,CAAiBE,WAAjB,EAA8B,CAC5B;AACD,KAHY,CAAf;AAKA,wBAAO,oBAAC,SAAD;AACL,MAAA,OAAO,EAAEd,OADJ;AAEL,MAAA,MAAM,EAAEY,MAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAQD,GAjBD;;AAmBA,MAAIJ,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAP;AACD;;AAED,SAAOD,QAAQ,GAAGI,SAAS,EAAZ,gBAAiB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC;AACD,CA9BD;;AAgCA,eAAejB,KAAK,CAACqB,IAAN,CAAWT,KAAX,CAAf","sourcesContent":["import React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\n \nconst containerStyle = {\n  width: '100%',\n  height: '85vh'\n};\n\nconst options = {\n    zoomControlOptions: {\n        // ...otherOptions\n    }\n}\n\nconst center = {\n  lat: 0,\n  lng: 0\n};\n \nconst key_google = 'AIzaSyCpcjpET_egxZ-KiFlQwio0x7HLFjcphgc';\nconst Index = () => {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: key_google // ,\n    // ...otherOptions\n  })\n\n  const renderMap = () => {\n    // wrapping to a function is useful in case you want to access `window.google`\n    // to eg. setup options or create latLng object, it won't be available otherwise\n    // feel free to render directly if you don't need that\n    const onLoad = React.useCallback(\n      function onLoad (mapInstance) {\n        // do something with map Instance\n      }\n    )\n    return <GoogleMap\n      options={options}\n      onLoad={onLoad}\n    >\n      {\n        // ...Your map components\n      }\n    </GoogleMap>\n  }\n\n  if (loadError) {\n    return <div>Map cannot be loaded right now, sorry.</div>\n  }\n\n  return isLoaded ? renderMap() : <Spinner />\n}\n\nexport default React.memo(Index);"]},"metadata":{},"sourceType":"module"}