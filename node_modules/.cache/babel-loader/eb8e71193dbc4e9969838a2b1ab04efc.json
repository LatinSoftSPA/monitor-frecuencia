{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useFetch = (url, method) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //const param = {method: method};\n    const fetchResource = async () => {\n      try {\n        let res = await fetch(url);\n        let data = await res.json();\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n        setError(error);\n      }\n    };\n\n    fetchResource();\n  }, [url]); //const param = {method: method};\n\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/home/mvera/Documentos/LATINSOFT/REACT JS/APP MONITORES/src/Hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","method","data","setData","loading","setLoading","error","setError","fetchResource","res","fetch","json"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEO,OAAF,EAAWC,UAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAES,KAAF,EAASC,QAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMU,aAAa,GAAG,YAAY;AAC9B,UAAI;AACA,YAAIC,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAD,CAArB;AACA,YAAIE,IAAI,GAAG,MAAMO,GAAG,CAACE,IAAJ,EAAjB;AACAR,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OALD,CAKE,OAAOC,KAAP,EAAc;AACZD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,KAVD;;AAWAE,IAAAA,aAAa;AAChB,GAdQ,EAcN,CAACR,GAAD,CAdM,CAAT,CAL8B,CAoB9B;;AAEA,SAAO;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACH,CAvBD;;AAyBA,eAAeP,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url, method) => {\n    const [ data, setData ] = useState([]);\n    const [ loading, setLoading ] = useState(true);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        //const param = {method: method};\n        const fetchResource = async () => {\n            try {\n                let res = await fetch(url);\n                let data = await res.json();\n                setData(data);\n                setLoading(false);\n            } catch (error) {\n                setLoading(false);\n                setError(error);\n            }\n        }\n        fetchResource();\n    }, [url]);\n    //const param = {method: method};\n\n    return { data, loading, error };\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}