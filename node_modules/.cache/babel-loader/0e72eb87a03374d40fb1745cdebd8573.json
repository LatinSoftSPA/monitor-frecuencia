{"ast":null,"code":"import _slicedToArray from\"/home/mvera/Documentos/LATINSOFT/REACT JS/APP MONITORES/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{GoogleMap,LoadScript,useLoadScript}from'@react-google-maps/api';import{STYLE_CONTAI,MAPA_OPTION,MAPA_CENTER,KEY_GOOGLE}from\"./mapConfig\";import Loading from'../Loading';import Error500 from'../Errors/500';var Index=function Index(){var _React$useState=React.useState(null),_React$useState2=_slicedToArray(_React$useState,2),map=_React$useState2[0],setMap=_React$useState2[1];var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),markers=_React$useState4[0],setMarkers=_React$useState4[1];var _React$useState5=React.useState(null),_React$useState6=_slicedToArray(_React$useState5,2),selected=_React$useState6[0],setSelected=_React$useState6[1];var _useLoadScript=useLoadScript({// googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\ngoogleMapsApiKey:KEY_GOOGLE}),isLoaded=_useLoadScript.isLoaded,loadError=_useLoadScript.loadError;var mapRef=React.useRef();var onMapLoad=React.useCallback(function(map){mapRef.current=map;},[]);var panTo=React.useCallback(function(_ref){var lat=_ref.lat,lng=_ref.lng;mapRef.current.panTo({lat:lat,lng:lng});mapRef.current.setZoom(14);},[]);var onUnmount=React.useCallback(function callback(map){setMap(null);},[]);if(loadError)return/*#__PURE__*/React.createElement(Error500,null);if(!isLoaded)return/*#__PURE__*/React.createElement(Loading,null);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(GoogleMap,{zoom:8,onLoad:onMapLoad,onUnmount:onUnmount,mapContainerStyle:STYLE_CONTAI,center:MAPA_CENTER,options:MAPA_OPTION},/*#__PURE__*/React.createElement(React.Fragment,null)));};export default React.memo(Index);","map":{"version":3,"sources":["/home/mvera/Documentos/LATINSOFT/REACT JS/APP MONITORES/src/componets/Mapa/index.jsx"],"names":["React","GoogleMap","LoadScript","useLoadScript","STYLE_CONTAI","MAPA_OPTION","MAPA_CENTER","KEY_GOOGLE","Loading","Error500","Index","useState","map","setMap","markers","setMarkers","selected","setSelected","googleMapsApiKey","isLoaded","loadError","mapRef","useRef","onMapLoad","useCallback","current","panTo","lat","lng","setZoom","onUnmount","callback","memo"],"mappings":"8KAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,UAApB,CAAgCC,aAAhC,KAAqD,wBAArD,CACA,OAASC,YAAT,CAAuBC,WAAvB,CAAoCC,WAApC,CAAiDC,UAAjD,KAAmE,aAAnE,CAEA,MAAOC,CAAAA,OAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,eAArB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,qBACMV,KAAK,CAACW,QAAN,CAAe,IAAf,CADN,oDACTC,GADS,qBACJC,MADI,0CAEcb,KAAK,CAACW,QAAN,CAAe,EAAf,CAFd,qDAETG,OAFS,qBAEAC,UAFA,0CAGgBf,KAAK,CAACW,QAAN,CAAe,IAAf,CAHhB,qDAGTK,QAHS,qBAGCC,WAHD,wCAMgBd,aAAa,CAAC,CAC1C;AACAe,gBAAgB,CAAEX,UAFwB,CAAD,CAN7B,CAMRY,QANQ,gBAMRA,QANQ,CAMEC,SANF,gBAMEA,SANF,CAWhB,GAAMC,CAAAA,MAAM,CAAGrB,KAAK,CAACsB,MAAN,EAAf,CACA,GAAMC,CAAAA,SAAS,CAAGvB,KAAK,CAACwB,WAAN,CAAkB,SAACZ,GAAD,CAAS,CACzCS,MAAM,CAACI,OAAP,CAAiBb,GAAjB,CACH,CAFiB,CAEf,EAFe,CAAlB,CAIA,GAAMc,CAAAA,KAAK,CAAG1B,KAAK,CAACwB,WAAN,CAAkB,cAAkB,IAAfG,CAAAA,GAAe,MAAfA,GAAe,CAAVC,GAAU,MAAVA,GAAU,CAC9CP,MAAM,CAACI,OAAP,CAAeC,KAAf,CAAqB,CAAEC,GAAG,CAAHA,GAAF,CAAOC,GAAG,CAAHA,GAAP,CAArB,EACAP,MAAM,CAACI,OAAP,CAAeI,OAAf,CAAuB,EAAvB,EACH,CAHa,CAGX,EAHW,CAAd,CAKA,GAAMC,CAAAA,SAAS,CAAG9B,KAAK,CAACwB,WAAN,CAAkB,QAASO,CAAAA,QAAT,CAAkBnB,GAAlB,CAAuB,CACvDC,MAAM,CAAC,IAAD,CAAN,CACH,CAFiB,CAEf,EAFe,CAAlB,CAKA,GAAIO,SAAJ,CAAe,mBAAO,oBAAC,QAAD,MAAP,CACf,GAAI,CAACD,QAAL,CAAe,mBAAO,oBAAC,OAAD,MAAP,CAEf,mBACI,4CACI,oBAAC,SAAD,EACI,IAAI,CAAE,CADV,CAEI,MAAM,CAAEI,SAFZ,CAGI,SAAS,CAAEO,SAHf,CAII,iBAAiB,CAAG1B,YAJxB,CAKI,MAAM,CAAGE,WALb,CAMI,OAAO,CAAGD,WANd,eASA,wCATA,CADJ,CADJ,CAeH,CA5CD,CA8CA,cAAeL,CAAAA,KAAK,CAACgC,IAAN,CAAWtB,KAAX,CAAf","sourcesContent":["import React from 'react';\nimport { GoogleMap, LoadScript, useLoadScript } from '@react-google-maps/api';\nimport { STYLE_CONTAI, MAPA_OPTION, MAPA_CENTER, KEY_GOOGLE } from \"./mapConfig\";\n\nimport Loading  from '../Loading';\nimport Error500 from '../Errors/500';\n\nconst Index = () => {\n    const [map, setMap] = React.useState(null);\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState(null);\n\n\n    const { isLoaded, loadError } = useLoadScript({\n        // googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n        googleMapsApiKey: KEY_GOOGLE\n    });\n \n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    const panTo = React.useCallback(({ lat, lng }) => {\n        mapRef.current.panTo({ lat, lng });\n        mapRef.current.setZoom(14);\n    }, []);\n\n    const onUnmount = React.useCallback(function callback(map) {\n        setMap(null);\n    }, []);\n \n\n    if (loadError) return <Error500 />;\n    if (!isLoaded) return <Loading />;\n\n    return (\n        <div>\n            <GoogleMap \n                zoom={8} \n                onLoad={onMapLoad}\n                onUnmount={onUnmount} \n                mapContainerStyle={ STYLE_CONTAI } \n                center={ MAPA_CENTER } \n                options={ MAPA_OPTION }\n            >\n            { /* Child components, such as markers, info windows, etc. */ }\n            <></>\n            </GoogleMap>\n        </div>\n    )\n}\n\nexport default React.memo(Index);"]},"metadata":{},"sourceType":"module"}